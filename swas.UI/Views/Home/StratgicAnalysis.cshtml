<html>

<head>

<style>

    #myChart1 {
        max-width: 100% !important; /* Set the maximum width of the canvas */
            max-height: 100% !important; /* Set the maximum height of the canvas */

        width: auto;
        height: auto;
    }

        .aj {
            text-align: center;
            height: 2rem;
            background-color: #044c92;
            padding-top: 0px;
        }
</style>
</head>
<div class="card radius-10 w-100">
    <div class="card-body">
        <div class="">
            <h5 class="card-title aj" style="text-align:center;color:white;text-shadow:2px 2px black">Statistic Analysis</h5>
        </div>
        <hr />
      
        <div class="row">
            <div class="col-lg-6 col-md-6 col-sm-6">

                <div class="card radius-12">
                    <div class="card-body">
                        <h6 class="mb-0">Application Type wise Analysis : (Last Six Months) </h6>
                        <div class="d-flex align-items-center mb-3">
                            <canvas id="myChart" style="width: 752px; height: 376px;"></canvas>
                        </div>
                    </div>

                </div>
            </div>
            <!-- Right Sidebar (Pie Chart) -->
            <div class="col-lg-6 col-md-6 col-sm-6">
                <div class="card radius-12">
                    <div class="card-body">
                        <h6 class="mb-0">Current Status Analysis</h6>
                        <div class="d-flex align-items-center mb-3">
                            <canvas id="myChart1" style=" width:752px; height: 376px;width: 752px; height: 376px;"></canvas>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

</html>

<script>
    var myChart1;
    $(document).ready(function () {



        function lightenColor(color, percent) {
            var num = parseInt(color.replace("#", ""), 16),
                amt = Math.round(2.55 * percent),
                R = (num >> 16) + amt,
                B = (num >> 8 & 0x00FF) + amt,
                G = (num & 0x0000FF) + amt;
            return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 + (B < 255 ? B < 1 ? 0 : B : 255) * 0x100 + (G < 255 ? G < 1 ? 0 : G : 255)).toString(16).slice(1);
        }


        // Function to generate random color
        function getRandomColorss() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }




        $.ajax({
            url: '/Home/indexToPieChart',
            method: 'GET',
            dataType: 'json',
            success: function (data) {

                if (data.error) {

                    console.error('Error fetching data:', data.error);
                    return;
                }

                updatePieChart(data);

                // var titles = data.map(item => item.Status);
                // var chartData = data.map(item => item.TotalProj);

                // updatePieChart(titles, chartData);

            },
            error: function (error) {

                console.error('Error fetching data:', error);
            }
        });


    })


    function updatePieChart(data) {

        var titles = data.map(item => item.Status);
        var chartData = data.map(item => item.TotalProj);


        var canvas = document.getElementById('myChart1');
        if (!canvas) {
            console.error("Canvas element 'myChart1' not found.");
            return;
        }
        var backgroundColors = generateRandomColors(titles.length);

        var ctx = canvas.getContext('2d');

        var myChart1 = new Chart(ctx, {
            type: 'pie',
            data: {
                labels: titles,
                datasets: [{
                    data: chartData,
                    backgroundColor: backgroundColors,
                    borderColor: backgroundColors, // Border color same as background color for consistency
                    borderWidth: 1,
                }],
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        });
    }
    function getRandomColor() {
        const minBrightness = 130; 
        let color;
        do {
            color = '#' + Math.floor(Math.random() * 16777215).toString(16); // Generate random color
            
            const rgb = parseInt(color.slice(1), 16);
            const r = (rgb >> 16) & 0xff;
            const g = (rgb >> 8) & 0xff;
            const b = (rgb >> 0) & 0xff;
            const brightness = (r + g + b) / 3;
            if (brightness < minBrightness) {
                color = null; 
            }
        } while (color === null);
        return color;
    }

    function generateRandomColors(count) {
        const colors = [];
        for (let i = 0; i < count; i++) {
            let color;
            do {
                color = getRandomColor();
            } while (colors.includes(color));
            colors.push(color);
        }
        return colors;
    }

</script>


<script>
   
    $(document).ready(function () {
        $.ajax({
            url: '/Home/indexToBarChart',
            method: 'GET',
            dataType: 'json',
            success: function (data) {
                console.log(data);
                if (data.error) {
                    console.error('Error fetching data:', data.error);
                    return;
                }

               
                var AppDescNames = [...new Set(data.filter(item => item.AppDesc !== null).map(item => item.AppDesc))];

var allMonths = getLastSixMonthNames();
var AllMonthss = [...new Set(data.map(item => item.MonthName))];

var datasets = AppDescNames.map(AppName => {
    var appCounts = AllMonthss.map(month => {
        var monthData = data.find(item => item.MonthName === month && item.AppDesc === AppName);
        return monthData ? monthData.AppTypeCount : 0;
    });

     
     
    return {
      
        label: AppName,
        data: appCounts,
        backgroundColor: getRandomColor(),
      
        
    };
});

var ctx = document.getElementById('myChart').getContext('2d');
var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: allMonths,
        datasets: datasets,
    },
    options: {
        scales: {
            x: {
                stacked: false,
                title: {
                    display: true,
                    text: 'Month'
                }
            },
            y: {
                stacked: false,
                title: {
                    display: true,
                    text: 'AppType Count'
                }
            }
        }
    }
});
            }
        });

     function getLastSixMonthNames() {
    var today = new Date();
    var months = [];

    for (var i = 5; i >= 0; i--) {
        var date = new Date(today);
        date.setMonth(today.getMonth() - i);
        var monthName = date.toLocaleString('default', { month: 'long' }) + ' ' + date.getFullYear().toString().slice(-2);
      
        months.push(monthName);
    }

    return months;
}


        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
    });
</script>




@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    }
